# # # Gemini-1.5.Pro model------------------------------------------------------------------------------------------------------------------------------
# @frappe.whitelist()
# def process_po_data(doc, method=None):
#     # # Get the attached file (PDF) from the 'attach_copy' field
#     if not doc.attach_copy:
#         frappe.throw("Please upload a PO copy in the 'attach_copy' field.")

#     # # Get the file URL from the document
#     file_url = doc.attach_copy

#     # # Determine if the file is private or public
#     is_private = file_url.startswith('/private/files/')
#     if is_private:
#         file_name = file_url.split("/private/files/")[1]
#     elif file_url.startswith('/files/'):
#         file_name = file_url.split("/files/")[1]
#     else:
#         frappe.throw("Unsupported file location.")

#     # # Construct the file path using get_bench_path and get_path
#     file_path = frappe.utils.get_bench_path() + "/sites/" + frappe.utils.get_path('private' if is_private else 'public', 'files', file_name)[2:]

#     # # Ensure the file exists
#     if not frappe.db.exists("File", {'file_name': file_name}):
#         frappe.throw(f"File {doc.attach_copy} does not exist.")

#     # # Upload the file to Google Gemini
#     try:
#         gemini_file = upload_to_gemini(file_path, mime_type="application/pdf")
#     except Exception as e:
#         frappe.throw(f"Failed to upload file to Gemini: {e}")

#     # # Wait for the file to be processed
#     try:
#         wait_for_files_active([gemini_file])
#     except Exception as e:
#         frappe.throw(f"File processing error: {e}")


#     # # Generate content using the Gemini model with the uploaded file
#     try:
#         # Use Gemini 1.5 Pro model
#         model = genai.GenerativeModel(
#             model_name="gemini-1.5-pro",
#             generation_config={
#                 "temperature": 0.2,
#                 "top_p": 0.90,
#                 "top_k": 50,
#                 "max_output_tokens": 15000,
#                 "response_mime_type": "application/json",
#             },
#         )

#         # # Define the prompt with the file
#         prompt = {
#             "role": "user",
#             "parts": [
#                 gemini_file,  # Attach the uploaded file
#                 """Extract a Customer name (entity who raised the Purchase Order), Purchase Order Number, Purchase Order Issue Date, Required By Date, 
#                 and an Item table in CSV format with columns: Item Name or Item Description, Quantity, Rate or Discounted Rate, Unit Of Measure. Provide specific values only. 
#                 Save data in customer_name,po_no,po_date,required_date,item_table. Extract all dates in 'yyyy/mm/dd' format. 
#                 Find Item Name from the whole description if item Name not available"""

#                 # """
#                 # Extract a Customer name (entity who raised the Purchase Order), Purchase Order Number, Purchase Order Issue Date, Required By Date, 
#                 # and an Item table in CSV format with columns: Item Name or Item Description, Quantity, Rate or Discounted Rate, Unit Of Measure. Provide specific values only. 
#                 # Save data in customer_name, po_no, po_date, required_date, item_table. Extract all dates in 'yyyy/mm/dd' format. 
#                 # Find Item Name from the whole description if item Name not available. 
#                 # Also, extract all items listed in the PDF and include them in the item table. Make sure to consider every unique item mentioned and extract relevant details like name or description, quantity, rate, and unit of measure.
#                 # """

#             ]
#         }

#         # # Generate the response
#         chat_session = model.start_chat(history=[prompt])
#         response = chat_session.send_message("Start processing")

#         # # Parse the response JSON
#         po_data = json.loads(response.text)

#         # # Extract individual variables from JSON response
#         customer_name = po_data.get("customer_name", "N/A")
#         po_no = po_data.get("po_no", "N/A")
#         po_date = po_data.get("po_date", "N/A")
#         required_date = po_data.get("required_date", "N/A")
#         item_table_csv = po_data.get("item_table", "N/A")

#     except Exception as e:
#         frappe.throw(f"Failed to get response from Google Gemini: {e}")

#     # # Print the extracted data separately
#     # frappe.msgprint(f"Customer Name: {customer_name}")
#     # frappe.msgprint(f"Purchase Order Number: {po_no}")
#     # frappe.msgprint(f"Purchase Order Issue Date: {po_date}")
#     # frappe.msgprint(f"Required By Date: {required_date}")
    
#     # # Process the CSV data
#     item_table = []
#     if item_table_csv != "N/A":
#         try:
#             # # Check if item_table_csv is already a list or needs conversion to CSV format
#             if isinstance(item_table_csv, list):
#                 # # Convert the list to CSV string
#                 output = io.StringIO()
#                 csv_writer = csv.writer(output)
#                 # # Write header with underscores and lowercase
#                 csv_writer.writerow(["item_name", "qty", "rate", "uom"])
#                 # # Write each item
#                 for item in item_table_csv:
#                     csv_writer.writerow([
#                         item.get("Item Name or Item Description"),
#                         item.get("Quantity"),
#                         item.get("Rate or Discounted Rate"),
#                         item.get("Unit Of Measure")
#                     ])
#                 item_table_csv = output.getvalue()  # Get the CSV string
            
#             # # Use csv.reader to parse the CSV data
#             csv_reader = csv.reader(io.StringIO(item_table_csv))
#             header = next(csv_reader)  # Get the header
#             for row in csv_reader:
#                 item_dict = dict(zip(header, row))  # Create a dictionary for each row
#                 item_table.append(item_dict)
    
#             # # Display item table data (if needed)
#             # frappe.msgprint("Item Table:")
#             # for item in item_table:
#             #     frappe.msgprint(f"Item: {item['item_name_or_item_description']}, Quantity: {item['quantity']}, Rate: {item['rate_or_discounted_rate']}, UOM: {item['unit_of_measure']}")
#         except Exception as e:
#             frappe.throw(f"Error processing item table CSV: {e}")


#     # return {
#     #     "customer_name": customer_name,
#     #     "po_no": po_no,
#     #     "po_date": po_date,
#     #     "required_date": required_date,
#     #     "item_table": item_table
#     # }
#     return customer_name, po_no, po_date, required_date, item_table

##-----------------------------------------------------------------------------------------------------------------------------------
#### CODE FOR gemini-1.5-flash---

# @frappe.whitelist()
# def process_po_data(doc, method=None):
#     # Get the attached file (PDF) from the 'attach_copy' field
#     if not doc.attach_copy:
#         frappe.throw("Please upload a PO copy in the 'attach_copy' field.")

#     # Get the file URL from the document
#     file_url = doc.attach_copy

#     # Determine if the file is private or public
#     is_private = file_url.startswith('/private/files/')
#     if is_private:
#         file_name = file_url.split("/private/files/")[1]
#     elif file_url.startswith('/files/'):
#         file_name = file_url.split("/files/")[1]
#     else:
#         frappe.throw("Unsupported file location.")

#     # Construct the file path using get_bench_path and get_path
#     file_path = get_bench_path() + "/sites/" + frappe.utils.get_path('private' if is_private else 'public', 'files', file_name)[2:]

#     # Ensure the file exists
#     if not frappe.db.exists("File", {'file_name': file_name}):
#         frappe.throw(f"File {doc.attach_copy} does not exist.")

#     # Upload the file to Google Gemini
#     try:
#         gemini_file = upload_to_gemini(file_path, mime_type="application/pdf")
#     except Exception as e:
#         frappe.throw(f"Failed to upload file to Gemini: {e}")

#     # Wait for the file to be processed
#     try:
#         wait_for_files_active([gemini_file])
#     except Exception as e:
#         frappe.throw(f"File processing error: {e}")

#     # Generate content using the Gemini model with the uploaded file
#     try:
#         # Use the "gemini-1.5-flash" model
#         model = genai.GenerativeModel(
#             model_name="gemini-1.5-flash",
#             generation_config={
#                 "temperature": 0,
#                 "top_p": 0.95,
#                 "top_k": 40,
#                 "max_output_tokens": 8192,  # Reduced token limit to avoid large responses
#                 "response_mime_type": "application/json",
#             },
#         )

#         # Define the prompt with the file
#         prompt = {
#             "role": "user",
#             "parts": [
#                 gemini_file,  # Attach the uploaded file
#                 # """Extract a Customer name (entity who raised the Purchase Order), Purchase Order Number, Purchase Order Issue Date, Required By Date, 
#                 # and an Item table in CSV format with columns: Item Name or Item Description, Quantity, Rate or Discounted Rate, Unit Of Measure. Provide specific values only. 
#                 # Save data in customer_name,po_no,po_date,required_date,item_table. Extract all dates in 'yyyy/mm/dd' format. 
#                 # Find Item Name from the whole description if item Name not available"""

#                 """
#                 Extract a Customer name (entity who raised the Purchase Order), Purchase Order Number, Purchase Order Issue Date, Required By Date, 
#                 and an Item table in CSV format with columns: Item Name or Item Description, Quantity, Rate or Discounted Rate, Unit Of Measure. Provide specific values only. 
#                 Save data in customer_name, po_no, po_date, required_date, item_table. Extract all dates in 'yyyy/mm/dd' format. 
#                 Find Item Name from the whole description if item Name not available. 
#                 Also, extract all items listed in the PDF and include them in the item table. Make sure to consider every unique item mentioned and extract relevant details like name or description, quantity, rate, and unit of measure.
#                 """
#             ]
#         }

#         # Generate the response
#         chat_session = model.start_chat(history=[prompt])
#         response = chat_session.send_message("Start processing")

#         # Log the raw response text for debugging
#         response_text = response.text
#         frappe.logger().info(f"Raw response from Gemini: {response_text[:1000]}")  # Log first 1000 chars for inspection

#         # Try to parse the JSON response
#         try:
#             po_data = json.loads(response_text)
#         except json.JSONDecodeError as e:
#             frappe.throw(f"Failed to parse Gemini response: {str(e)}. Raw response: {response_text[:500]}")
        
#         # Check if the JSON is valid and complete
#         if 'customer_name' not in po_data or 'po_no' not in po_data or 'item_table' not in po_data:
#             frappe.throw(f"Response from Gemini seems incomplete. Raw response: {response_text[:1000]}")

#         # Extract individual variables from JSON response
#         customer_name = po_data.get("customer_name", "N/A")
#         po_no = po_data.get("po_no", "N/A")
#         po_date = po_data.get("po_date", "N/A")
#         required_date = po_data.get("required_date", "N/A")
#         item_table_csv = po_data.get("item_table", "N/A")

#     except Exception as e:
#         frappe.throw(f"Failed to get response from Google Gemini: {e}")

#     # Process the CSV data
#     item_table = []
#     if item_table_csv != "N/A":
#         try:
#             # Check if item_table_csv is already a list or needs conversion to CSV format
#             if isinstance(item_table_csv, list):
#                 # Convert the list to CSV string
#                 output = io.StringIO()
#                 csv_writer = csv.writer(output)
#                 # Write header with underscores and lowercase
#                 csv_writer.writerow(["item_name", "qty", "rate", "uom"])
#                 # Write each item
#                 for item in item_table_csv:
#                     csv_writer.writerow([
#                         item.get("Item Name or Item Description"),
#                         item.get("Quantity"),
#                         item.get("Rate or Discounted Rate"),
#                         item.get("Unit Of Measure")
#                     ])
#                 item_table_csv = output.getvalue()  # Get the CSV string
            
#             # Use csv.reader to parse the CSV data
#             csv_reader = csv.reader(io.StringIO(item_table_csv))
#             header = next(csv_reader)  # Get the header
#             for row in csv_reader:
#                 item_dict = dict(zip(header, row))  # Create a dictionary for each row
#                 item_table.append(item_dict)

#         except Exception as e:
#             frappe.throw(f"Error processing item table CSV: {e}")

#     return customer_name, po_no, po_date, required_date, item_table